{"version":3,"file":"data-extraction.js","sourceRoot":"","sources":["../../src/lib/data-extraction.ts"],"names":[],"mappings":"AAAA,qDAAqD;AAWrD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAY,EAAiB,EAAE;IAC5D,MAAM,SAAS,GAAkB,EAAE,CAAC;IAEpC,+CAA+C;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACnE,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAC9B,iDAAiD,CAClD,CAAC;IAEF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAC5B,0EAA0E,CAC3E,CAAC;IAEF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAC3B,gDAAgD,CACjD,CAAC;IAEF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAC3B,2EAA2E,CAC5E,CAAC;IAEF,IAAI,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC3C,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACvC,CAAC;IAED,IAAI,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE,CAAC;QACxD,SAAS,CAAC,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,IAAI,WAAW,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,eAAe,EAAE,CAAC;QACtD,MAAM,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YACnB,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC;QAChC,CAAC;IACH,CAAC;IAED,IAAI,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,gBAAgB,EAAE,CAAC;QACrD,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAED,IAAI,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;QAC9C,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAAkB,EAAiB,EAAE;IACnE,mDAAmD;IACnD,MAAM,mBAAmB,GACvB,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC5B,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC;QACpC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;QAChC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC3B,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC5B,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAE/B,IAAI,mBAAmB,EAAE,CAAC;QACxB,8DAA8D;QAC9D,OAAO,cAAc,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IACD,8CAA8C;IAC9C,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC","sourcesContent":["// Data extraction utilities for parsing AI responses\r\n\r\nexport interface ExtractedData {\r\n  loanAmount?: number;\r\n  loanType?: string;\r\n  name?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  chatHistory?: string; // Add this field\r\n}\r\n\r\nexport const extractAllData = (text: string): ExtractedData => {\r\n  const extracted: ExtractedData = {};\r\n\r\n  // Extract from the specific AI template format\r\n  const nameMatch = text.match(/Name: (\\[name\\]|[a-zA-Z\\s]+)\\.?$/im);\r\n  const loanTypeMatch = text.match(\r\n    /Loan type:\\s*(\\[loan type\\]|[^\\r\\n]+?)\\.?\\s*$/im\r\n  );\r\n\r\n  const amountMatch = text.match(\r\n    /Loan amount:\\s*(\\[loan amount\\]|\\$?\\d{1,3}(?:,\\d{3})*(?:\\.\\d{2})?)\\s*$/im\r\n  );\r\n\r\n  const phoneMatch = text.match(\r\n    /Phone:\\s*(\\[phone number\\]|[0-9 ()+\\-]+)\\s*$/im\r\n  );\r\n\r\n  const emailMatch = text.match(\r\n    /Email:\\s*(\\[email\\]|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[A-Za-z]{2,})\\s*$/im\r\n  );\r\n\r\n  if (nameMatch && nameMatch[1] !== \"[name]\") {\r\n    extracted.name = nameMatch[1].trim();\r\n  }\r\n\r\n  if (loanTypeMatch && loanTypeMatch[1] !== \"[loan type]\") {\r\n    extracted.loanType = loanTypeMatch[1].trim();\r\n  }\r\n\r\n  if (amountMatch && amountMatch[1] !== \"[loan amount]\") {\r\n    const amount = parseFloat(amountMatch[1].replace(/[$,]/g, \"\"));\r\n    if (!isNaN(amount)) {\r\n      extracted.loanAmount = amount;\r\n    }\r\n  }\r\n\r\n  if (phoneMatch && phoneMatch[1] !== \"[phone number]\") {\r\n    extracted.phone = phoneMatch[1].trim();\r\n  }\r\n\r\n  if (emailMatch && emailMatch[1] !== \"[email]\") {\r\n    extracted.email = emailMatch[1].trim();\r\n  }\r\n\r\n  return extracted;\r\n};\r\n\r\nexport const parseAIResponse = (aiResponse: string): ExtractedData => {\r\n  // Check if this is the final confirmation template\r\n  const isFinalConfirmation =\r\n    aiResponse.includes(\"Thank\") &&\r\n    aiResponse.includes(\"submit button\") &&\r\n    aiResponse.includes(\"Loan type\") &&\r\n    aiResponse.includes(\"Name\") &&\r\n    aiResponse.includes(\"Phone\") &&\r\n    aiResponse.includes(\"Email\");\r\n\r\n  if (isFinalConfirmation) {\r\n    // returns an object with the extracted data for the form data\r\n    return extractAllData(aiResponse);\r\n  }\r\n  // For all other messages, return empty object\r\n  return {};\r\n};\r\n"]}