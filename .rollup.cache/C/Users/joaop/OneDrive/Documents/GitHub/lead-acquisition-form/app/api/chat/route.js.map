{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,YAAY,EAAE,MAAM,aAAa,CAAC;AACxD,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC;IACxB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;CACnC,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwCrB,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,OAAoB;;IAC7C,IAAI,CAAC;QACH,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QAEjE,MAAM,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;YACtD,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,OAAO,EAAE,GAAG,CAAC,OAAO;SACrB,CAAC,CAAC,CAAC;QAEJ,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,KAAK,EAAE,OAAO;YACd,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE;gBAC1C,GAAG,mBAAmB;aACvB;YACD,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,GAAG;SAChB,CAAC,CAAC;QAEH,MAAM,UAAU,GACd,CAAA,MAAA,MAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,0CAAE,OAAO,0CAAE,OAAO;YACrC,4DAA4D,CAAC;QAE/D,OAAO,YAAY,CAAC,IAAI,CAAC;YACvB,QAAQ,EAAE,UAAU;YACpB,WAAW;YACX,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC1C,OAAO,YAAY,CAAC,IAAI,CACtB,EAAE,KAAK,EAAE,gCAAgC,EAAE,EAC3C,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport OpenAI from \"openai\";\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nconst SYSTEM_PROMPT = `\r\n#ROLE\r\nYou are a friendly loan advisor assistant. Your role is to guide users through a loan application process.\r\n\r\n#CONVERSATION RULES:\r\n1. Always be friendly and supportive\r\n2. Ask one question at a time\r\n3. Validate user responses against business rules\r\n4. Guide users back to valid options if they provide invalid input\r\n5. Collect information in this order: loan amount → loan type → personal details\r\n6. After collecting all details, present a summary of the user's loan amount, loan type, name, phone, and email for review before closure\r\n7. If the user requests changes to any detail, update the information and re-confirm until the user explicitly agrees everything is correct\r\n\r\n#BUSINESS RULES:\r\n- **Loan amounts**: $1,000 - $40,000 only\r\n- **Loan types**: car, motorcycle, boat, jet ski, caravan, camper trailer, personal, business (required)\r\n- **Personal details**: name, phone, email (all required)\r\n\r\n#RESPONSE FORMAT:\r\nAlways respond in a conversational, helpful manner. If you extract data, include it in your response naturally.\r\n\r\n#VALIDATION:\r\n- If loan amount is outside $1,000-$40,000, politely ask for a valid amount\r\n- If loan type is not in the list, politely list the available options\r\n- For personal details, ask for name, phone, and email together\r\n\r\n#REVIEW & CONFIRMATION:\r\n- Once all information is collected, say:\r\n\"Here's what I have so far:  \r\nLoan type: [loan type]  \r\nLoan amount: [loan amount]  \r\nName: [name]  \r\nPhone: [phone number]  \r\nEmail: [email]  \r\nIs everything correct?\"\r\n- If the user says \"no\" or requests changes, update the relevant details and repeat the confirmation step until the user says \"yes\"\r\n\r\n#CHAT CLOSURE:\r\n- Only after the user confirms all details are correct, present the submission option using this template:\r\n\"Perfect! I have all the information I need. You can now submit your application by clicking the button below.\"\r\n`;\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { messages, currentStep, formData } = await request.json();\r\n\r\n    const conversationHistory = messages.map((msg: any) => ({\r\n      role: msg.role,\r\n      content: msg.content,\r\n    }));\r\n\r\n    const response = await openai.chat.completions.create({\r\n      model: \"gpt-4\",\r\n      messages: [\r\n        { role: \"system\", content: SYSTEM_PROMPT },\r\n        ...conversationHistory,\r\n      ],\r\n      temperature: 0.7,\r\n      max_tokens: 500,\r\n    });\r\n\r\n    const aiResponse =\r\n      response.choices[0]?.message?.content ||\r\n      \"I apologize, but I encountered an error. Please try again.\";\r\n\r\n    return NextResponse.json({\r\n      response: aiResponse,\r\n      currentStep,\r\n      formData,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"OpenAI API error:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to process your request\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"]}