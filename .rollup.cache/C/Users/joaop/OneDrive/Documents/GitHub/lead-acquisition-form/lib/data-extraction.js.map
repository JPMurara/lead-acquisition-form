{"version":3,"file":"data-extraction.js","sourceRoot":"","sources":["data-extraction.ts"],"names":[],"mappings":"AAAA,qDAAqD;AAWrD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAY,EAAiB,EAAE;IAC3D,+CAA+C;IAC/C,MAAM,WAAW,GAAG,8BAA8B,CAAC;IACnD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,OAAO,EAAE,CAAC;QACZ,2CAA2C;QAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QAErC,iBAAiB;QACjB,IAAI,SAAS,IAAI,IAAI,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;YAC5C,OAAO,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAY,EAAiB,EAAE;IAC7D,MAAM,cAAc,GAAG;QACrB,UAAU;QACV,iBAAiB;QACjB,WAAW;QACX,cAAc;QACd,cAAc;QACd,qBAAqB;QACrB,eAAe;QACf,eAAe;KAChB,CAAC;IAEF,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAErC,KAAK,MAAM,QAAQ,IAAI,cAAc,EAAE,CAAC;QACtC,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,OAAO,QAAQ,CAAC;QAClB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAiB,EAAE;IACzD,uEAAuE;IACvE,MAAM,YAAY,GAAG;QACnB,qEAAqE,EAAE,qBAAqB;QAC5F,uEAAuE,EAAE,sBAAsB;KAChG,CAAC;IAEF,KAAK,MAAM,OAAO,IAAI,YAAY,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACtB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC;gBAC1C,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAY,EAAiB,EAAE;IAC1D,MAAM,UAAU,GAAG,iDAAiD,CAAC;IACrE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAEvC,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1B,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAY,EAAiB,EAAE;IAC1D,8BAA8B;IAC9B,MAAM,UAAU,GACd,qEAAqE,CAAC;IACxE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAEvC,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1B,yBAAyB;QACzB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAY,EAAiB,EAAE;IAC5D,MAAM,SAAS,GAAkB,EAAE,CAAC;IAEpC,+CAA+C;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACpE,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAC9B,0DAA0D,CAC3D,CAAC;IACF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAC3B,sDAAsD,CACvD,CAAC;IACF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAC3B,sEAAsE,CACvE,CAAC;IAEF,IAAI,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC3C,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACvC,CAAC;IAED,IAAI,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE,CAAC;QACxD,SAAS,CAAC,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,IAAI,WAAW,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,eAAe,EAAE,CAAC;QACtD,MAAM,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YACnB,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC;QAChC,CAAC;IACH,CAAC;IAED,IAAI,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,gBAAgB,EAAE,CAAC;QACrD,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAED,IAAI,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;QAC9C,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,0DAA0D;AAC1D,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,UAAkB,EAClB,WAAmB,EACJ,EAAE;IACjB,mDAAmD;IACnD,MAAM,mBAAmB,GACvB,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;QAChC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACrC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;QAChC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC;QACtC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAElC,IAAI,mBAAmB,EAAE,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAC;QACzE,OAAO,cAAc,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED,8CAA8C;IAC9C,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,WAAmB,EACnB,QAAuB,EACf,EAAE;IACV,QAAQ,WAAW,EAAE,CAAC;QACpB,KAAK,aAAa;YAChB,OAAO,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC;QAC3D,KAAK,WAAW;YACd,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,WAAW,CAAC;QAC9D,KAAK,kBAAkB;YACrB,OAAO,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;gBACtD,CAAC,CAAC,UAAU;gBACZ,CAAC,CAAC,kBAAkB,CAAC;QACzB;YACE,OAAO,aAAa,CAAC;IACzB,CAAC;AACH,CAAC,CAAC;AAEF,+DAA+D;AAC/D,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,UAAkB,EAClB,QAAuB,EACvB,WAAmB,EACV,EAAE;IACX,mDAAmD;IACnD,MAAM,aAAa,GAAG;QACpB,0DAA0D;QAC1D,6BAA6B;QAC7B,4BAA4B;KAC7B,CAAC;IACF,MAAM,gBAAgB,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CACtD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CACzB,CAAC;IAEF,4DAA4D;IAC5D,MAAM,UAAU,GAAG,OAAO,CACxB,QAAQ,CAAC,IAAI;QACX,QAAQ,CAAC,KAAK;QACd,QAAQ,CAAC,KAAK;QACd,QAAQ,CAAC,UAAU;QACnB,QAAQ,CAAC,QAAQ,CACpB,CAAC;IAEF,MAAM,WAAW,GAAG,WAAW,KAAK,UAAU,CAAC;IAE/C,qEAAqE;IACrE,OAAO,gBAAgB,IAAI,CAAC,UAAU,IAAI,WAAW,CAAC,CAAC;AACzD,CAAC,CAAC","sourcesContent":["// Data extraction utilities for parsing AI responses\r\n\r\nexport interface ExtractedData {\r\n  loanAmount?: number;\r\n  loanType?: string;\r\n  name?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  chatHistory?: string; // Add this field\r\n}\r\n\r\nexport const extractAmount = (text: string): number | null => {\r\n  // Match amounts like $1,000, $1000, 1000, etc.\r\n  const amountRegex = /\\$?([0-9,]+(?:\\.[0-9]{2})?)/g;\r\n  const matches = text.match(amountRegex);\r\n\r\n  if (matches) {\r\n    // Take the first amount found and clean it\r\n    const amount = matches[0].replace(/[$,]/g, \"\");\r\n    const numAmount = parseFloat(amount);\r\n\r\n    // Validate range\r\n    if (numAmount >= 1000 && numAmount <= 40000) {\r\n      return numAmount;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const extractLoanType = (text: string): string | null => {\r\n  const validLoanTypes = [\r\n    \"car loan\",\r\n    \"motorcycle loan\",\r\n    \"boat loan\",\r\n    \"jet ski loan\",\r\n    \"caravan loan\",\r\n    \"camper trailer loan\",\r\n    \"personal loan\",\r\n    \"business loan\",\r\n  ];\r\n\r\n  const lowerText = text.toLowerCase();\r\n\r\n  for (const loanType of validLoanTypes) {\r\n    if (lowerText.includes(loanType)) {\r\n      return loanType;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const extractName = (text: string): string | null => {\r\n  // Look for AI acknowledgments like \"Thank you Kate!\" or \"Great, Kate!\"\r\n  const namePatterns = [\r\n    /(?:thank you|great|perfect|excellent|awesome|thanks)\\s+([a-zA-Z]+)/i, // AI acknowledgments\r\n    /(?:thank you|great|perfect|excellent|awesome|thanks),?\\s+([a-zA-Z]+)/i, // With optional comma\r\n  ];\r\n\r\n  for (const pattern of namePatterns) {\r\n    const match = text.match(pattern);\r\n    if (match && match[1]) {\r\n      const name = match[1].trim();\r\n      if (name.length >= 2 && name.length <= 50) {\r\n        return name;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const extractEmail = (text: string): string | null => {\r\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\r\n  const matches = text.match(emailRegex);\r\n\r\n  if (matches && matches[0]) {\r\n    return matches[0].toLowerCase();\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const extractPhone = (text: string): string | null => {\r\n  // Match various phone formats\r\n  const phoneRegex =\r\n    /(?:\\+?1[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})/g;\r\n  const matches = text.match(phoneRegex);\r\n\r\n  if (matches && matches[0]) {\r\n    // Clean the phone number\r\n    return matches[0].replace(/[^\\d+]/g, \"\");\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const extractAllData = (text: string): ExtractedData => {\r\n  const extracted: ExtractedData = {};\r\n\r\n  // Extract from the specific AI template format\r\n  const nameMatch = text.match(/Thank you (\\[name\\]|[a-zA-Z\\s]+)\\./i);\r\n  const loanTypeMatch = text.match(\r\n    /applying for a (\\[loan type\\]|[a-zA-Z\\s]+) in the amount/\r\n  );\r\n  const amountMatch = text.match(/amount of (\\[loan amount\\]|\\$?[0-9,]+)/i);\r\n  const phoneMatch = text.match(\r\n    /phone number as (\\[phone number\\]|[0-9\\s\\-\\(\\)\\+]+)/i\r\n  );\r\n  const emailMatch = text.match(\r\n    /email as (\\[email\\]|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/i\r\n  );\r\n\r\n  if (nameMatch && nameMatch[1] !== \"[name]\") {\r\n    extracted.name = nameMatch[1].trim();\r\n  }\r\n\r\n  if (loanTypeMatch && loanTypeMatch[1] !== \"[loan type]\") {\r\n    extracted.loanType = loanTypeMatch[1].trim();\r\n  }\r\n\r\n  if (amountMatch && amountMatch[1] !== \"[loan amount]\") {\r\n    const amount = parseFloat(amountMatch[1].replace(/[$,]/g, \"\"));\r\n    if (!isNaN(amount)) {\r\n      extracted.loanAmount = amount;\r\n    }\r\n  }\r\n\r\n  if (phoneMatch && phoneMatch[1] !== \"[phone number]\") {\r\n    extracted.phone = phoneMatch[1].trim();\r\n  }\r\n\r\n  if (emailMatch && emailMatch[1] !== \"[email]\") {\r\n    extracted.email = emailMatch[1].trim();\r\n  }\r\n\r\n  return extracted;\r\n};\r\n\r\n// Update parseAIResponse to detect this specific template\r\nexport const parseAIResponse = (\r\n  aiResponse: string,\r\n  currentStep: string\r\n): ExtractedData => {\r\n  // Check if this is the final confirmation template\r\n  const isFinalConfirmation =\r\n    aiResponse.includes(\"Thank you\") &&\r\n    aiResponse.includes(\"applying for a\") &&\r\n    aiResponse.includes(\"amount of\") &&\r\n    aiResponse.includes(\"phone number as\") &&\r\n    aiResponse.includes(\"email as\");\r\n\r\n  if (isFinalConfirmation) {\r\n    console.log(\"Detected final confirmation template, extracting all data\");\r\n    return extractAllData(aiResponse);\r\n  }\r\n\r\n  // For all other messages, return empty object\r\n  return {};\r\n};\r\n\r\nexport const determineNextStep = (\r\n  currentStep: string,\r\n  formData: ExtractedData\r\n): string => {\r\n  switch (currentStep) {\r\n    case \"loan_amount\":\r\n      return formData.loanAmount ? \"loan_type\" : \"loan_amount\";\r\n    case \"loan_type\":\r\n      return formData.loanType ? \"personal_details\" : \"loan_type\";\r\n    case \"personal_details\":\r\n      return formData.name && formData.email && formData.phone\r\n        ? \"complete\"\r\n        : \"personal_details\";\r\n    default:\r\n      return \"loan_amount\";\r\n  }\r\n};\r\n\r\n// Hybrid approach: Check AI response AND form completion state\r\nexport const shouldShowSubmitButton = (\r\n  aiResponse: string,\r\n  formData: ExtractedData,\r\n  currentStep: string\r\n): boolean => {\r\n  // Primary check: AI explicitly says to show button\r\n  const submitPattern = [\r\n    /submit\\w* your application by clicking the button below/i,\r\n    /submit\\w* your application/i,\r\n    /click\\w* the button below/i,\r\n  ];\r\n  const aiSaysShowButton = submitPattern.some((pattern) =>\r\n    pattern.test(aiResponse)\r\n  );\r\n\r\n  // Secondary check: Form is complete and we're in final step\r\n  const isComplete = Boolean(\r\n    formData.name &&\r\n      formData.email &&\r\n      formData.phone &&\r\n      formData.loanAmount &&\r\n      formData.loanType\r\n  );\r\n\r\n  const isFinalStep = currentStep === \"complete\";\r\n\r\n  // Show button if AI says so OR if form is complete and in final step\r\n  return aiSaysShowButton || (isComplete && isFinalStep);\r\n};\r\n"]}